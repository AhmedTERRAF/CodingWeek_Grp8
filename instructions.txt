# 📌 Bone Marrow Transplant (BMT) Prediction Application
This application consists of a **FastAPI backend** and a **React frontend** to predict survival status after a Bone Marrow Transplant.

---

## ⚙️ 1. Backend Setup (FastAPI)
The backend handles API requests, processes input data, and makes predictions using a trained **LightGBM model**.

### ➤ 1.1 Navigate to the Backend Directory
Ensure you are in the `Back_end` folder:

        cd Back_end


### ➤ 1.2 Create & Activate a Virtual Environment

        python -m venv .venv 
        .venv/bin/activate


### ➤ 1.3 Install Dependencies

        pip install -r requirements.txt
        .venv/bin/activate

### ➤ 1.4 Run the Backend Server
 
        python main.py

✔️ The backend should now be running at: **`http://127.0.0.1:8000`**  
✔️ To check the API, open: **`http://127.0.0.1:8000/docs`** in your browser.

---

## 🖥️ 2. Frontend Setup (React)
The frontend provides the user interface to input patient data and receive predictions.

### ➤ 2.1 Clone the Frontend Repository (if not already cloned)

    git clone https://github.com/AhmedTERRAF/CodingWeek_Grp8.git


### ➤ 2.2 Navigate to the Frontend Directory

    cd Front_end


### ➤ 2.3 Install Dependencies

    npm install


### ➤ 2.4 Start the React Application

    npm start

✔️ The frontend should now be running at: **`http://localhost:3000`**  
✔️ Open your browser and go to **`http://localhost:3000`** to access the application.

---

## 🔗 3. Connecting Frontend & Backend
By default, the frontend is configured to send API requests to the backend at **`http://127.0.0.1:8000/predict`**.

### ➤ **Troubleshooting**
✅ Ensure the **backend is running before starting the frontend**.  
✅ If the prediction doesn’t work, check **developer console (F12 → Console)** for errors.  
✅ If CORS issues occur, restart the backend.


## 🚀 4. Running Full Application

1️⃣ Open **Terminal 1** → Start Backend:

        cd Back_end/machine_learning
        python main.py

2️⃣ Open **Terminal 2** → Start Frontend:

        cd Front_end 
        npm start

Once the application is running, you can explore the machine_learning folder to understand how the model is trained and evaluated.

📂 Inside Back_end/machine_learning, you'll find:

models/ → Saved trained models (e.g., LightGBM_model.pkl)
notebooks/ → Exploratory Data Analysis (EDA) & visualizations
shap_analysis/ → SHAP value explanations for model interpretability
feature_importance_plots/ → Feature importance graphs
src/ → Scripts for training, testing, and analyzing models
plots/→ Stores all generated plots, including feature importance and data visualizations.
model_training.py → Handles training different ML models.
model_testing.py → Evaluates the model on test data.
shap_analysis.py → Generates SHAP value plots.
eda.py → Exploratory Data Analysis script

To ensure the integrity of the machine learning pipeline, several test scripts are available in the **`tests/`** folder.

### ✅ Available Test Scripts:
- **`test_class_imbalance.py`** → Tests the handling of class imbalance.
- **`test_compare_oversampling.py`** → Compares different oversampling techniques.
- **`test_data_processing.py`** → Verifies data preprocessing steps.
- **`test_eda.py`** → Ensures EDA functions work correctly.
- **`test_model_testing.py`** → Validates model evaluation functions.
- **`test_model_training.py`** → Checks if model training runs correctly.
- **`test_shap_analysis.py`** → Tests SHAP analysis for interpretability.